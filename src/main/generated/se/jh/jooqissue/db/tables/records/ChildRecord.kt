/*
 * This file is generated by jOOQ.
 */
package se.jh.jooqissue.db.tables.records


import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl

import se.jh.jooqissue.db.tables.Child


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.14.11",
        "schema version:1.0"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ChildRecord() : TableRecordImpl<ChildRecord>(Child.CHILD), Record2<String?, Long?> {

    var name: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var parentId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, Long?> = super.fieldsRow() as Row2<String?, Long?>
    override fun valuesRow(): Row2<String?, Long?> = super.valuesRow() as Row2<String?, Long?>
    override fun field1(): Field<String?> = Child.CHILD.NAME
    override fun field2(): Field<Long?> = Child.CHILD.PARENT_ID
    override fun component1(): String? = name
    override fun component2(): Long? = parentId
    override fun value1(): String? = name
    override fun value2(): Long? = parentId

    override fun value1(value: String?): ChildRecord {
        this.name = value
        return this
    }

    override fun value2(value: Long?): ChildRecord {
        this.parentId = value
        return this
    }

    override fun values(value1: String?, value2: Long?): ChildRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised ChildRecord
     */
    constructor(name: String? = null, parentId: Long? = null): this() {
        this.name = name
        this.parentId = parentId
    }
}
